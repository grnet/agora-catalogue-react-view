// Run from root project dir:
// ./node_modules/.bin/eslint <relative_path_fileOrDir>
{
  "env": {
    "browser": true,
     "es6": true
  },
  "parser": "babel-eslint",
  "extends": [
    "eslint:recommended",
    "plugin:flowtype/recommended"
  ],
  "parserOptions": {
    "ecmaFeatures": {
      "experimentalObjectRestSpread": true,
      "jsx": true
    },
    "sourceType": "module"
  },
  "plugins": [
    "react",
    "import",
    "flowtype"
  ],
  "rules": {

  // general

    "comma-dangle": ["warn", "always-multiline"],
    "indent": ["warn", 2, { "VariableDeclarator": 2 }],
    "linebreak-style": ["warn", "unix"],
    "default-case": "error",
    "eqeqeq": "error",
    "quotes": ["warn", "single"],
    "no-control-regex": ["off"],
    "no-useless-escape": ["off"],
    "no-extra-semi": ["off"],
    "array-callback-return": "error",
    "no-const-assign": "error",
    "no-this-before-super": "error",
    "no-undef": "error",
    "no-unreachable": "warn",
    "no-unused-vars": [
      "warn",
      {
        "args": "none",
        "ignoreRestSiblings": true
      }
    ],

    // spaces

    "no-multi-spaces": "warn",
    "no-trailing-spaces": "warn",
    "block-spacing": ["warn", "always"],
    "no-whitespace-before-property": "error",
    "comma-spacing": ["error", { "before": false, "after": true }],
    "space-before-function-paren": ["warn", {
      "anonymous": "never",
      "named": "never",
      "asyncArrow": "always"
    }],
    "space-in-parens": ["error", "never"],
    "space-infix-ops": "warn",
    "spaced-comment": ["warn", "always", { "block": { "balanced": true }}],
    "object-curly-spacing": ["error", "always"],
    "key-spacing": ["error", { "beforeColon": false, "afterColon": true }],

    // empty lines

    "lines-between-class-members": ["warn", "always"],
    "no-multiple-empty-lines": ["warn", {
      "max": 1,
      "maxEOF": 1,
      "maxBOF": 0
    }],
    "padding-line-between-statements": ["warn",
      { "blankLine": "always", "prev": ["var", "let", "const"], "next": "*" },
      { "blankLine": "any",
        "prev": ["var", "let", "const"],
        "next": ["var", "let", "const"] },
      { "blankLine": "always", "prev": "*", "next": "return" },
      { "blankLine": "always", "prev": "import", "next": "*" },
      { "blankLine": "never", "prev": "import", "next": "import" },
      { "blankLine": "always", "prev": "*", "next": "function" },
      { "blankLine": "always", "prev": "*", "next": "export" },
      { "blankLine": "any", "prev": "export", "next": "export" },
      { "blankLine": "always", "prev": "*", "next": "class" }
    ],
    "padded-blocks": ["warn", {
      "blocks": "never",
      "switches": "never",
      "classes": "always"
    }],

    //import

    "import/first": ["error", "absolute-first"],
    "import/no-amd": "error",

    // react

    "react/jsx-uses-vars": "error",
    "react/jsx-pascal-case": "error",
    "react/prefer-es6-class": ["error", "always"],
    "react/jsx-closing-bracket-location": ["warn", "tag-aligned"],
    "react/jsx-closing-tag-location": "warn",
    "react/jsx-no-comment-textnodes": "error",
    "react/jsx-boolean-value": ["warn", "never"],
    "react/self-closing-comp": ["warn", { "component": true, "html": true }],
    "react/jsx-no-duplicate-props": ["warn", { "ignoreCase": true }],
    "react/jsx-uses-react": 2,
    "react/jsx-tag-spacing": ["warn", {
      "closingSlash": "never",
      "beforeSelfClosing": "always",
      "afterOpening": "never",
      "beforeClosing": "never"
    }],
    // based on airbnb
    "react/jsx-curly-spacing": ["warn", {
      "when": "never",
      "children": {
        "when": "always"
      }
    }],
    // When using a boolean attribute in JSX, you can set the attribute value
    // to true or omit the value. This rule will enforce to omit the value.
    "react/jsx-boolean-value": ["error", "never"],
    // Components without children can be self-closed to avoid unnecessary extra
    // closing tag.
    "react/self-closing-comp": ["error", { "component": true }],
    "react/jsx-equals-spacing": ["warn", "never"]
  }
}
